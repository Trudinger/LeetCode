LeetCode No. 240 Search a 2D Matrix II 

A straightforward approach is to do binary search of each row. However, this method does not take advantage of the sorted columns.
The following method starts at the bottom-left of the matrix or top-right of the matrix and move in the direction determined by comparing the current value and the target value.
The crucial idea is that since both rows and column are sorted, each step should prune O(m) or O(n) possibilities in the matrix.

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int R = matrix.size();
        if(R==0){return false;}
        int C = matrix[0].size();
        if(C==0){return false;}
        int Row = R - 1, Col = 0;
        while(Row < R && Row >= 0 && Col < C && Col >= 0){
            if(matrix[Row][Col] == target){return true;}
            else if(matrix[Row][Col] > target){Row--;}
            else if(matrix[Row][Col] < target){Col++;}
        }
        return false;
    }
};
