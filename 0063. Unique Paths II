LeetCode No. 63 Unique Paths II

This is a variant of the problem Unique Paths. The only issue is to take care of the obstacles. We use the data matrix as the dynamic programming matrix to reduce memory.
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int M = obstacleGrid.size();
        int N = obstacleGrid[0].size();
        int Col = 1, Row = 1;
        if(obstacleGrid[0][0] == 1) {return 0;} 
        obstacleGrid[0][0] = 1;
        for(Row = 1; Row < M; ++Row)
        {
            if((obstacleGrid[Row][0]==0)&&(obstacleGrid[Row-1][0]==1)){obstacleGrid[Row][0] = 1;}
            else {obstacleGrid[Row][0] = 0;}
        }
        for(Col = 1; Col < N; ++Col)
        {
            if((obstacleGrid[0][Col]==0)&&(obstacleGrid[0][Col-1]==1)){obstacleGrid[0][Col] = 1;}
            else {obstacleGrid[0][Col] = 0;}
        }
        for(Row = 1; Row < M; ++Row)
        {
            for(Col = 1; Col < N; ++Col)
            {
                if(obstacleGrid[Row][Col] == 0)
                {
                    obstacleGrid[Row][Col] = obstacleGrid[Row-1][Col] + obstacleGrid[Row][Col-1];
                }
                else
                {
                    obstacleGrid[Row][Col] = 0;
                }
            }
        }
        return obstacleGrid[M-1][N-1];
    }
};
