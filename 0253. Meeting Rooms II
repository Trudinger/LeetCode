LeetCode No. 253. Meeting Rooms II

The crucial point is the finish time of each meeting. One method is to sort intervals with respect to the right endpoints and then arrange meeting rooms accordingly.
However, it is not hard to see that if the intervals are sorted with respect to the start time, then only the earliest finish time is used in comparison with a new meeting.
Hence, we may use a priority queue to record the finish times.

// sorting and comparison method
class Solution {
public:
    int minMeetingRooms(vector<vector<int>>& intervals) {
        int N = intervals.size();
        if(N==0){return 0;}
        sort(intervals.begin(),intervals.end());
        vector<int> endRoom;
        endRoom.push_back(intervals[0][1]);
        int i = 1, j = 0;
        for(i = 1; i < N; ++i)
        {
            int need = 1;
            for(j = 0; j < endRoom.size();++j)
            {
                if(intervals[i][0] >= endRoom[j])
                {
                    endRoom[j] = intervals[i][1];
                    need = 0;
                    break;
                }
            }
            if(need == 1){endRoom.push_back(intervals[i][1]);}
        }
        return endRoom.size();
    }
};

// heap/priority queue method
class Solution {
public:
    int minMeetingRooms(vector<vector<int>>& intervals) {
        int N = intervals.size();
        if(N==0){return 0;}
        sort(intervals.begin(), intervals.end());
        vector<int> hp; // the priority queue template might be more proper here
        hp.push_back(intervals[0][1]);
        make_heap(hp.begin(),hp.end(),greater<>());
        int i = 1;
        for(i = 1; i < N; ++i)
        {
            if(intervals[i][0] >= hp.front()){
                pop_heap(hp.begin(),hp.end(),greater<>());
                hp.pop_back();
            }
            hp.push_back(intervals[i][1]);
            push_heap(hp.begin(),hp.end(),greater<>());
        }
        return hp.size();
    }
};
