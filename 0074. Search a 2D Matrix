LeetCode No. 74 Search a 2D Matrix

The problem can be solved by using binary search. The solution below uses two binary searches: one for row and the other for column.

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int R = matrix.size();
        if(R == 0){return false;}
        int C = matrix[0].size();
        if(C==0){return false;}
        vector<int> firstCol;
        
        for(int i = 0; i < R; ++i)
        {
            firstCol.push_back(matrix[i][0]);
        }
        if(target > firstCol[R-1]){
            return binary_search(matrix[R-1].begin(),matrix[R-1].end(),target);
        }
        int pos = lower_bound(firstCol.begin(),firstCol.end(),target) - firstCol.begin();
        if(matrix[pos][0] == target){return true;}
        else if(pos == 0){return false;}
        else{
            return binary_search(matrix[pos-1].begin(),matrix[pos-1].end(),target);
        }
    }
};
