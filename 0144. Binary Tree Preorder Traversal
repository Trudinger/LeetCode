LeetCode No. 144 Binary Tree Preorder Traversal

There are at least three approaches to tree treversal problems: recursion, iteration, and Morris. Here we present recursion and iteration.
Preorder traversal is a common DFS of a binary tree.

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
// recursion
class Solution {
    vector<int> sol;
    public: 
    void preOrder(TreeNode* node){
        if(node!=NULL){
            sol.push_back(node->val);
            preOrder(node->left);
            preOrder(node->right);
        }
    }
    public:
    vector<int> preorderTraversal(TreeNode* root) {
        if(root==NULL){return sol;}
        else{
            preOrder(root);
        }
        return sol;
    }
};
// iteration
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> sol;
        if(root == NULL){return sol;}
        stack<TreeNode*> st;
        st.push(root);
        while(!st.empty()){
            TreeNode* cur = st.top();
            st.pop();
            sol.push_back(cur->val);
            if(cur->right != NULL){st.push(cur->right);}
            if(cur->left != NULL){st.push(cur->left);}            
        }
        return sol;
    }
};
