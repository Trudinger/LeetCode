LeetCode No. 120 Triangle 

This is a typical dynamic programming problem.

class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int N = triangle.size();
        int sum[N][N];
        int Minimum;
        sum[0][0] = triangle[0][0];
        for(int i = 1; i < N; ++i)
        {
            sum[i][0] = sum[i-1][0] + triangle[i][0];
            sum[i][i] = sum[i-1][i-1] + triangle[i][i];
        }
        int j = 2, k = 1, l = 0;
        for(j = 2; j < N; ++j)
        {
            for(k = 1; k < j; ++k)
            {
                if(sum[j-1][k-1]<sum[j-1][k]){sum[j][k] = sum[j-1][k-1]+triangle[j][k];}
                else {sum[j][k] = sum[j-1][k]+triangle[j][k];}
            }
        }
        Minimum = sum[N-1][0];
        for(l = 1; l < N; ++l)
        {
            if(Minimum > sum[N-1][l]){Minimum = sum[N-1][l];}
        }
        return Minimum;
    }
};
