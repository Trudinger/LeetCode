LeetCode No. 35 Search Insert Position

This is a standard problem of binary search. Interestingly, linear search is also fast for the current test cases. 

// binary search
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size() - 1;
        int pivot = 0;
        while(left <= right){
            pivot = left + (right - left)/2;
            if(nums[pivot] > target){
                right = pivot - 1;
            }
            else if(nums[pivot] < target){
                left = pivot + 1;
            }
            else{return pivot;}
        }
        return left;
    }
};

// linear search
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        for(int i = 0; i < nums.size(); ++i){
            if(nums[i] >= target){return i;}
        }
        return nums.size();
    }
};
