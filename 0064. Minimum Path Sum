LeetCode No. 64 Minimum Path Sum

This is a dynamic programming problem. The recursion relation is cost[i][j] = grid[i][j] + min(cost[i-1][j],cost[i][j-1]). Be careful about the boundary condition.
The memory can still be reduced but the implementation is not included here.

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int Row = grid.size();
        int Col = grid[0].size();
        int Minimum[Row][Col];
        Minimum[0][0] = grid[0][0];
        for(int i = 1; i < Col; ++i)
        {
            Minimum[0][i] = Minimum[0][i-1] + grid[0][i]; 
        }
        for(int j = 1; j < Row; ++j)
        {
            Minimum[j][0] = Minimum[j-1][0] + grid[j][0]; 
        }
        for(int i = 1; i < Col; ++i)
        {
            for(int j = 1; j < Row; ++j)
            {
                if(Minimum[j][i-1] < Minimum[j-1][i])
                {
                    Minimum[j][i] = Minimum[j][i-1] + grid[j][i];
                }
                else
                {
                    Minimum[j][i] = Minimum[j-1][i] + grid[j][i];
                }
            }
        }
        return Minimum[Row-1][Col-1];
    }
};
